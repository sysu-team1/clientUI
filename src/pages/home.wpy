<template>
  <view class="page">
    <view class="section">
      <view class="page__hd">
        <view class="swiper-wrapper">
          <swiper class="swiper" indicator-dots autoplay circular>
            <block wx:for="{{PicList}}" wx:key="key">
              <swiper-item>
                <image class="swipe-img" mode="widthFix" src="{{item}}"/>
              </swiper-item>
            </block>
          </swiper>
        </view>
        <view class="search-wrapper">
          <navigator url="/pages/search" open-type="navigate" hover-class="none">
            <view class="input-wrapper weui-search-bar__box">
              <icon class="search-icon weui-icon-search_in-box" type="search" size="14" color="#fff"/>
              <input type="text" class="search-input weui-search-bar__input" placeholder="搜索" value="{{inputVal}}" focus="{{inputShowed}}" bindinput="inputTyping" disabled/>
            </view>
          </navigator>
        </view>
      </view>
      <view class="page__bd">
        <view>
          <repeat for="{{TaskList}}" key="key" index="index" item="task">
            <taskcard
              :taskid.sync="task.id"
              :title="task.title"
              :tag="task.tag"
              :imageUrl="task.image_path"
              :description="task.content"
              :reward="task.reward"
              :buttonDes="buttonDes"
              @navBtn.user="navigationBtn">
            </taskcard>
          </repeat>
        </view>
        <view wx:if="{{loading}}">
          <view class="weui-loadmore">
            <view class="weui-loading"></view>
            <view class="weui-loadmore__tips">正在加载</view>
          </view>
        </view>
        <view wx:else>
          <view class="weui-loadmore weui-loadmore_line">
            <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有更多啦</view>
          </view>
        </view>
      </view>
    </view>
    <navbar class="navbar" currentPage="home"></navbar>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import TaskCard from '../components/taskcard'
  import NavBar from '../components/nav-bar'
  import {homePageRefresh} from '../api'
  import {USER_WEIXIN_INFO, USER_LOGIN_INFO} from '../utils/constant'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '闲余翻身',
      enablePullDownRefresh: true, // 当前页
      backgroundTextStyle: 'dark' // 顶部显示颜色为深色的三个点
    };
    components = {
      taskcard: TaskCard,
      navbar: NavBar
    }
    data = {
      inputVal: null,
      inputShowed: false,
      PicList: [
        '/images/1.jpg',
        '/images/2.jpg'
      ],
      /*  TaskList {
          [
            accept_num: 任务接受人数
            content：任务描述
            id: 任务id
            image_path: 图片路径
            limit_num: 人数上限
            limit_time: 时间上限
            publish_id: 发布人id
            publish_time: 发布时间
            reward：任务奖励
            tag: [1,2,3]任务tag
            title: 任务标题
          ]
        }
      */
      TaskList: [],
      loading: true,
      currentLastID: -1,
      loadedData: [],
      buttonDes: '查看详情'
    }
    methods = {
      inputTyping (e) {
        this.inputVal = e.detail.value
      },
      clearInput () {
        this.inputVal = ''
      },
      showInput () {
        this.inputShowed = true
      },
      hideInput () {
        this.inputVal = ''
        this.inputShowed = false
      },
      navigationBtn(taskid, event) {
        var scene = 1
        wepy.navigateTo({
          url: 'detail?id=' + taskid + '&scene=' + scene
        })
      }
    }
    findLastID(array) {
      if (array.length === 0) {
        return 0
      }
      return array[array.length - 1].id
    }
    async fetchTaskList(currentLastID, operation) {
      // operation: ['refresh','loadmore']
      if (operation === 'refresh') {
        // 若操作为下拉刷新，则重新获取对应的任务列表即可
        this.loadedData = await homePageRefresh(this.currentLastID)
        // 变更lastid
        this.currentLastID = this.findLastID(this.loadedData.data.tasks)
        // 清空列表
        this.TaskList = []
        // 加载到对应的taskList中
        this.TaskList = [...this.TaskList, ...this.loadedData.data.tasks]
      } else if (operation === 'loadmore') {
        // 若操作为上滑触底加载，则传入对应的lastid
        this.loadedData = await homePageRefresh(this.currentLastID)
        // 变更lastid
        this.currentLastID = this.findLastID(this.loadedData.data.tasks)
        // 与本地taskList合并
        this.TaskList = [...this.TaskList, ...this.loadedData.data.tasks]
        // 判断是否加载完成
        if (this.currentLastID === 0) {
        }
      } else {
        console.log('操作传入错误')
      }
      this.$apply()
    }
    onPullDownRefresh() {
      if (this.loading === false) {
        this.currentLastID = -1
        this.loading = true
        this.setData({ loading: true })
        this.fetchTaskList(this.currentLastID, 'refresh')
        setTimeout(() => {
          wepy.stopPullDownRefresh()
          this.loading = false
          this.$apply()
        }, 3000)
      }
    }
    onReachBottom() {
      if (this.loading === false) {
        this.loading = true
        this.setData({ loading: true })
        this.fetchTaskList(this.currentLastID, 'loadmore')
        setTimeout(() => {
          this.loading = false
          this.$apply()
        }, 3000)
      }
    }
    onLoad() {
      // 是否同意微信授权
      let userInfo = wepy.getStorageSync(USER_WEIXIN_INFO)
      if (!userInfo) {
        wepy.reLaunch({
          url: 'authorize'
        })
      } else {

        // 是否有缓存登录信息，存在缓存自动登录获取对应的数据
        let userLoginInfo = wepy.getStorageSync(USER_LOGIN_INFO)
        if (!userLoginInfo) {
          wepy.reLaunch({
            url: 'login'
          })
        } else {
          this.loading = false
          this.currentLastID = -1
          this.fetchTaskList(this.currentLastID, 'refresh')
        }
      }
    }
  }
</script>

<style lang="less">
.page {
  position: relative;
}
.section {
  margin-bottom: 60px;
}
.search-wrapper {
  position: absolute;
  left: 50%;
  top: 0;
  border-radius: 20px;
  width: 80%;
  background: rgba(0, 0, 0, 0.3);
  transform: translate(-50%, 0);
}

.swipe-img {
  width: 100%;
}

.input-wrapper .input-placeholder {
  color: #efefee;
}

.card-footer{
  display: flex;
  flex-direction: row;
  .card-footer-tags {
  flex: 1;
  }
  .card-footer-btn {
    position: relative;
    align-items: center;
  }
}
.weui-loadmore__tips_in-line{
  background-color: transparent;
}
</style>
